[#chapter_mounting]
== Chapter 8: Accessing File Systems
Once you have identified your disks, you might want to get access to the files they contain. To make files stored on a device accessible, you must mount the device on a directory. The directory is the location from which files become visible. SystemRescue supports all mainstream file systems, including EXT4, XFS and BTRFS, which are used on Linux systems, and FAT and NTFS, which are used on Windows.

Unlike most Linux distributions, SystemRescue does not automatically mount file systems. It takes more effort to mount file systems manually, but this is required so you can control which file systems are being accessed. SystemRescue is often used to create physical copies of disks, as explained in <<chapter_diskphyscopy>>, so it is essential that file systems stored on these disks are not mounted during such operations. Manually mounting and unmounting file systems is easy once you are familiar with the commands involved.

=== Mounting a file system
You can mount a file system by running two simple commands in a terminal. As an example, we are going to mount a device named `/dev/sdc6` on a new directory named `software` so files can be accessed from this location. This new directory is called a mount point as it is where the device will be mounted. You can give this directory any name you like, but avoid spaces as these are used as separators in command lines.

First, you create a mount point. It is recommended that you create this new directory as a sub-directory of `/mnt` to keep things tidy. This new directory can be created with the `mkdir` command. The best approach is to run the command with the full path to the new directory as well as the option `-p` so it also creates parent directories (ie `/mnt`) if they do not already exist:
[subs=+quotes]
----
[root@sysrescue ~]# *mkdir -p /mnt/software*
----

The second step is to mount the device on the new mount point. You do this with the `mount` command, which requires two parameters. The first parameter is the name of the device which contains files you want to access. In the following example, the name is `/dev/sdc6`. The second parameter is the directory where the device will be mounted, `/mnt/software` in the example. The `mount` command also accepts optional parameters, and we are going to use the `-o ro` option to specify that the file system must be mounted in read-only mode. We are also adding option `-v` to increase the verbosity. Because of this, the command shows a message to confirm that it was successfully executed.
[subs=+quotes]
----
[root@sysrescue ~]# *mount /dev/sdc6 /mnt/software -o ro -v*
mount: /dev/sdc6 mounted on /mnt/software.
----

It is recommended that you mount the device in read-only mode if you do not plan to make any change to the files. This way, you are sure that these files cannot be deleted or modified by mistake. Once the device is mounted, use the `df` command, which stands for disk free. It shows how much space is in use on this device:
[subs=+quotes]
----
[root@sysrescue ~]# *df -hT /mnt/software*
Filesystem     Type  Size  Used Avail Use% Mounted on
/dev/sdc6      vfat  8.0G  826M  7.2G  11% /mnt/software
----

=== Navigating through file systems
You can explore the contents of your mounted file systems using applications such as `Thunar`, which is a graphical file manager accessible from the main menu, or by using Midnight Commander which is introduced below.

Here is how you show the contents of a mounted file system from the command line in the terminal. The `ls` command shows the files and directories which are present in a particular location. It is recommended that you use this command with the `-lh` options to get a more readable list. Specify the full path to the mount point. Here is an example of what it shows:
[subs=+quotes]
----
[root@sysrescue ~]# *ls -lh /mnt/software*
total 16K
drwxr-xr-x 2 root root 4.0K Sep  6 16:11 drivers
drwxr-xr-x 2 root root 4.0K Sep  6 16:11 systemrescue
drwxr-xr-x 2 root root 4.0K Sep  6 16:07 temp
drwxr-xr-x 2 root root 4.0K Sep  6 16:10 utilities
----

Another way to show the contents of the device is to change the current directory using `cd` and then run `ls` without providing any location:
[subs=+quotes]
----
[root@sysrescue ~]# *cd /mnt/software*
[root@sysrescue /mnt/software]# *ls -lh*
total 16K
drwxr-xr-x 2 root root 4.0K Sep  6 16:11 drivers
drwxr-xr-x 2 root root 4.0K Sep  6 16:11 systemrescue
drwxr-xr-x 2 root root 4.0K Sep  6 16:07 temp
drwxr-xr-x 2 root root 4.0K Sep  6 16:10 utilities
----

=== Access control
Linux and Windows operating systems have implemented access control on all modern file systems so access to files and directories can be restricted to specific users. Access restrictions prevent ordinary users from damaging files that belong to the operating system. In most organisations, these restrictions are also used to control which people can access sensitive files.

The default session in SystemRescue uses the `root` user account, which comes with all administrative rights. Hence the system will not stop you from accessing files on local disks even if these files have access restrictions. You can use the unrestricted access in SystemRescue to copy files which were restricted by other operating systems installed on the computer.

=== Accessing files
Here are some examples of operations that you can perform once a device has been mounted:

* If the operating system on your computer does not start, you can use SystemRescue to transfer important data files from an internal disk to an external disk before you erase the internal disk and reinstall the operating system. <<chapter_datatodisk>> explains how to recover data files this way.
* You might have modified a system configuration file incorrectly causing the system to stop working. You can use SystemRescue to access such system configuration files to revert the change and fix the system.
* You may want to backup or restore a Linux operating system by copying all its system files using commands such as `rsync`.

There are many ways to manipulate files in SystemRescue:

* To modify some files, for example, to fix a system configuration file, use any editor that comes with SystemRescue. Some editors are graphical, and others, such as `vim` and `nano`, work in the terminal.
* The graphical file manager is accessible from the main menu. You can use it to copy, move, rename or delete files. You access files by typing the full path to the mount point in the address bar at the top or by navigating using the sidebar. You can also perform these operations with commands such as `cp` to copy, `rm` to remove, `mv` to move or rename. Please refer to the corresponding reference documentation for more details.
* Midnight Commander, which is introduced next, is a very convenient way to work on files if you are not familiar with command lines.

=== Midnight Commander
This powerful tool lets you view, edit, copy, move, rename or delete files and directories. You start Midnight Commander by executing `mc` in a terminal. By default, it comes with two panes so you can easily copy or move files across two locations. When you want to switch from one pane to the other, press `Tab`. To navigate, use the arrow keys and `Enter`. To return to the parent directory, select the `..` entry at the top and press `Enter`.

The bottom of the application shows actions which can be triggered by pressing the corresponding function keys on the keyboard. For example, use `F3` to view the file which is currently selected, `F4` to edit it, `F5` to copy it, and `F6` to move it. To create a new directory use `F7`, and use `F8` to delete the selection. To quit press `F10`.

image::images/mc.png[The Midnight Commander file manager]

=== Unmounting file systems
When you have finished working on files, you are encouraged to execute the `sync` command in a terminal. This causes the system to flush any pending change to the disk.

Devices must be unmounted properly to make sure the file system structure remains consistent. To unmount a file system, use the `umount` command in a terminal. You must specify either the name of the device or the corresponding mount point. As an example, let's consider a device named `/dev/sdc6` which was mounted on `/mnt/software`. This device can be unmounted using either of these commands:
[subs=+quotes]
----
[root@sysrescue ~]# *umount /dev/sdc6*
[root@sysrescue ~]# *umount /mnt/software*
----

The `umount` command fails if any resource on the devices is still in use.
[subs=+quotes]
----
[root@sysrescue /mnt/software]# *umount /mnt/software*
umount: /mnt/software: target is busy.
----
If you get such an error, you must close all applications which are accessing files or directories on this device, including terminals where the current directory belongs to the device.

Also, when you have finished your operations, shut down SystemRescue properly by clicking `Log Out` and then `Shutdown` in the main menu.
