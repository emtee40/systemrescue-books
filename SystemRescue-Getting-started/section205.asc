[#chapter_network]
== Chapter 5: Network Connectivity

=== Configuring the network
You will sometimes need to connect to networks while you work from SystemRescue, either to get documentation from the internet or to transfer data to or from other computers. The network configuration is controlled by the NetworkManager service by default. It comes with user-friendly tools to configure both Ethernet and Wi-Fi network adapters from either the graphical interface or using commands in the terminal. The graphical configuration tool is accessible from an icon located next to the clock. When you click the icon with the left button of your mouse, it shows a menu like the following one:

image::images/network-manager-menu.png[NetworkManager menu]

You should see one entry for each Ethernet interface and a list of Wi-Fi networks if your computer supports them. If you don't see what you expected, it probably means there is no driver for your network adapter. It is more likely not to be supported if your hardware is very recent or if you use an old version of SystemRescue. Linux drivers are regularly added and updated, so you should upgrade to the latest version if your hardware is not supported.

To connect to a Wi-Fi network, just click on its name in the menu. If the network is encrypted, it will ask you for a password:

image::images/network-manager-wifi-password.png[Wi-Fi password]

If the network uses dynamic addresses, the connectivity should be configured automatically. This is the case with most home and corporate networks nowadays. In general, networks are configured with DHCP to provide a dynamic IP address, DNS servers, and a default gateway so connected devices can easily access the internet.

If your network does not use such a dynamic configuration, you must configure static addresses manually. To do this, go to the graphical interface and double click on a particular connection. Then choose either `IPv4 settings` or `IPv6 settings` and select the `Manual` method instead of `Automatic (DHCP)`.

image::images/network-manager-static-ip.png[Static network configuration]

If you prefer, you can also configure the network using command-line tools. NetworkManager can be controlled using both `nmcli` and `nmtui` in a terminal. Also, traditional Linux network commands such as `ifconfig` and `ip` are available.

=== State of the network connection
To check the network connection, click the NetworkManager icon using the right button of your mouse and select `Connection information` from the menu. It shows information that includes the IP address your computer is currently using. You will need this address if you want to connect from another computer, so make a record of it.

image::images/network-manager-info.png[Network connection information]

=== How to manage the firewall
By default, the firewall is enabled in SystemRescue, and it blocks only incoming connections. This prevents sensitive information stored on the computer from being exposed unintentionally. It allows you to establish outbound connections, so you can visit internet websites and connect to other computers from SystemRescue. Therefore, you won't need to change the firewall configuration in most cases.

You will have to intervene when you need to receive incoming connections on a computer running SystemRescue, for example for transferring data from a damaged computer as explained in <<chapter_dataovernet>>. In situations like these, you must authorise incoming connections either by adding a new rule in the firewall configuration or by stopping the firewall completely.

In SystemRescue, the firewall is controlled by two services: `iptables` and `ip6tables` which manage IPv4 and IPv6 respectively. You can check if the firewall is active by looking at the state of these services using the following commands in a terminal:

[subs=+quotes]
----
[root@sysrescue ~]# *systemctl is-active iptables*
active
[root@sysrescue ~]# *systemctl is-active ip6tables*
active
----

The most secure way to authorise new incoming connections is to create a rule which authorises only the connections you need. Then the system blocks all other incoming connections. For example, you might want to let another computer, which uses address `192.168.99.21`, connect to the SSH service running in SystemRescue. The SSH service uses TCP port 22 by default. Hence you would authorise such a connection using the following command in a terminal:
[subs=+quotes]
----
[root@sysrescue ~]# *iptables -I INPUT -p tcp -m tcp --dport 22 -s 192.168.99.21 -j ACCEPT*
----

If you are connected to a trusted network, it can be easier to completely stop the firewall, so all incoming connections are allowed. You can do this by stopping both services using the following command:
[subs=+quotes]
----
[root@sysrescue ~]# *systemctl stop iptables ip6tables*
----

You can then confirm that the two services have been stopped:
[subs=+quotes]
----
[root@sysrescue ~]# *systemctl is-active iptables*
inactive
[root@sysrescue ~]# *systemctl is-active ip6tables*
inactive
----

You can also use the following iptables commands if you want to check what firewall rules and policies are in effect:
[subs=+quotes]
----
[root@sysrescue ~]# *iptables -S*
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
[root@sysrescue ~]# *ip6tables -S*
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
----

You should focus on the target associated with the `INPUT` policy in the commands output. The target will be `ACCEPT` when the firewall authorises all inbound connections. When the target is `DROP` the firewall is not allowing new connections, so it needs specific rules for such connections to be authorised.
