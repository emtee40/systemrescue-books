[#chapter_chroot]
== Chapter 13: How to Fix Linux Systems Using chroot
SystemRescue comes with chroot, which can help fix many issues affecting Linux operating systems. It is particularly useful in the following situations:

* The Linux system can boot, but the password to authenticate on the system has been lost.
* The boot loader, such as Grub, which starts Linux has stopped working and must be reinstalled.
* The system boot process fails because of issues related to the Linux kernel or the initramfs image.

=== Why chroot might be needed
Before we dive into the details, it is important to understand why chroot may be required. Most Linux systems are started by a boot loader, such as Grub, which loads two files: the Linux kernel image file (often named vmlinuz) and the initramfs image file which provides additional kernel modules, initialisation programs and configuration files. Lots of things can go wrong with these two files to keep the system from booting properly. For example, the kernel might not be able to boot after a faulty update (this is quite rare). The system might also fail to boot if essential configuration files have been modified and those changes cause the start-up not to work with the new version of the initramfs file.

Such issues can often be resolved by running commands on the affected Linux system. For example, the kernel package could be updated to fix a bug that broke the system. Also, invalid configuration changes can be reverted, and a command can be executed to recreate the initramfs file using a new working configuration. As an example, the command which rebuilds an initramfs image is `update-initramfs` on Debian, `dracut` on Red Hat, and `mkinitcpio` on Arch Linux, so such commands are often distribution-specific. Also, these often rely on configuration files which are part of the broken system. Hence the commands to fix a broken Linux system often have to be executed from this specific system.

This problem is you need access to the broken system to run commands that can fix the issue. One way to sort this out is to boot SystemRescue, mount the root file system of the affected Linux system, and then use chroot to switch to the context of this broken system. This way, you can execute recovery commands as if you had been able to boot the broken system.

=== How chroot works
Chroot changes the effective root directory of the programs executed in the current terminal. In other words, these programs see the new directory as the root directory of the system. This allows you to run commands in the context of another Linux operating system as if the computer had directly started from that system. Chroot affects only programs executed in the current terminal, as it changes only the effective root directory of the current shell and all programs executed from that shell. All other programs continue to work in the original context.

For example, let's say your Linux system is installed on a local disk and you cannot open a session because you have forgotten your password. The procedure to follow is to boot SystemRescue, identify and mount the root file system of the local Linux system on a mount point such as `/mnt/linux`. Then use chroot to make this mount point the new effective root directory and execute the `passwd` command to reset the password in the chroot environment. The `passwd` command updates passwords stored in `/etc/shadow`. As the command runs in the chroot environment, the change actually takes place in `/mnt/linux/etc/shadow` which belongs to the affected Linux system. If the password command had been used outside of the chroot environment, it would instead have updated the password in `/etc/shadow` which is part of SystemRescue.

Many administration commands rely on virtual file systems such as `/dev`, `/proc` and `/sys`. Hence, these virtual file systems must be made available in the chroot environment for commands to work properly. The `arch-chroot` script takes care of setting up all these virtual file systems before it changes the effective root. This is why you should access chroot environments using `arch-chroot` instead of using the standard `chroot` command.

=== Detailed example
As an example, here are the steps to follow to change a password on a Linux operating system using chroot from SystemRescue. As usual, start by booting SystemRescue, then go to the graphical environment and launch a terminal.

The device where the non-working Linux system is installed must then be identified using `lsblk`:
[subs=+quotes]
----
[root@sysrescue ~]# *lsblk -o path,size,fstype,label,model*
PATH        SIZE FSTYPE      LABEL    MODEL
/dev/sdc  465.8G                      Samsung_SSD_850_EVO_mSATA
/dev/sdc1     4G vfat        UEFI_ESP
/dev/sdc2   5.2G btrfs       boot
/dev/sdc3 406.5G crypto_LUKS
/dev/sdc4    16M
/dev/sdc5    40G ntfs        Windows
/dev/sdc6     2G vfat        SOFTWARE
/dev/sdc7     8G btrfs       Fedora
----
In this example, the device corresponding to the Fedora Linux root file system has been identified as `/dev/sdc7`.

Next, create a mount point named `linux` and mount the Fedora Linux root file system there:
[subs=+quotes]
----
[root@sysrescue ~]# *mkdir -p /mnt/linux*
[root@sysrescue ~]# *mount /dev/sdc7 /mnt/linux*
----

Now you are ready to use `arch-chroot` to change the current context:
[subs=+quotes]
----
[root@sysrescue ~]# *arch-chroot /mnt/linux*
----

You can confirm that the context has been successfully changed as files belonging to Fedora are accessible without having to specify the mount point as a prefix.
[subs=+quotes]
----
[root@sysrescue /]# *cat /etc/fedora-release*
Fedora release 33 (Thirty Three)
----

However, the prompt still shows `sysrescue` because the hostname in memory has not changed. We can then run the commands to fix the Linux system files on the disk. In the current example we reset the password of the `root` user account:
[subs=+quotes]
----
[root@sysrescue /]# *passwd root*
Changing password for user root.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.
----

After all changes have been made, type `exit` in the current terminal to quit the chroot environment. Finally, you unmount the Linux file system. Please note that the recursive option is required so all additional file systems, which were mounted by `arch-chroot`, are unmounted automatically.
[subs=+quotes]
----
[root@sysrescue /]# *exit*
[root@sysrescue ~]# *umount --recursive /mnt/linux*
----

=== Conclusion
Chroot is very useful for accessing Linux operating systems installed on the disk from SystemRescue. It can be used in many situations to solve various types of problems affecting such systems. You must have a good understanding of a problem to be able to fix it. You should be able to determine the cause of the problem by carefully reading any error messages displayed during the boot process. You may have to do more research on the internet to understand how to fix a particular type of problem on a particular Linux distribution.

Please note: chroot will fail if you use a 32-bit version of SystemRescue to access a 64-bit system. But you could use chroot from a 64-bit version of SystemRescue to access a 32-bit system. This is one of the reasons it is recommended that you always use the 64-bit version of SystemRescue unless your hardware does not support it.
