[#chapter_starting]
== Chapter 3: Starting SystemRescue

=== Booting from the removable device
After you prepare the SystemRescue boot device, it is time to use it. You should make sure the computer starts from the boot device you prepared. You can do this by pressing the correct key when you start the computer. You can boot from a specific removable boot device temporarily, or you can modify the boot order in the firmware settings so the removable boot device you prepared is used before other boot devices. Ideally, the computer should always try to boot from a removable device before it looks for the internal disk, so you don't worry about the boot priority each time you want to boot from a removable device. A message should appear just after you start the computer to indicate which keys to press to make these changes. In general, it is either a function key such as `F1` or `F2`, or a key like `Delete` or `Enter`.

=== Boot menus
Once the system has started from the removable boot device, you should see the SystemRescue boot menu with a blue background. There are two types of boot menus. The BIOS menu appears if the computer is based on a legacy BIOS firmware or if it is using UEFI firmware configured to run in legacy mode:

image::images/boot-menu-bios-v02.png[BIOS boot mode]

The UEFI boot menu appears if you are using a recent computer configured to boot in UEFI mode:

image::images/boot-menu-uefi-v03.png[UEFI boot menu]

The two types of boot menus are similar but there are some differences. The first few entries are the most useful ones. They allow you to boot the main SystemRescue operating system in different ways. If you started in Legacy BIOS mode, you will also see an entry to run `Memtest86+`. This standalone program performs extended memory tests. It is particularly useful if you experience stability issues with your computer, such as crashes, and you want to know if this is caused by defective memory modules. Unfortunately, this program is not available in UEFI mode. The following sections provide information about the main boot entries.

==== Boot using the default options
The first choice in the menu causes SystemRescue to boot with reasonable options so it is most likely to work for everyone. As this is the default choice, it will be activated if you press `Enter` when it is highlighted or if you let the timeout expire. The configuration associated with this entry causes the system to run from the boot device you prepared. The system start-up will be quick, but the removable boot device will be required throughout the session. You cannot remove it until you shut down or reboot the computer.

==== Boot and copy the system to memory (copytoram)
A popular alternative is to boot and copy the system to memory (RAM). This causes the whole system to be copied from the boot device to the memory during the boot process. This takes additional time to start, and it requires more RAM. However, once it is fully initialised the system will run entirely from memory. It should be more reactive, and it will not rely on the boot device after the initialisation is complete. Therefore, the boot device can be removed when the system is ready, and it won't be affected.

This way to boot the system requires more resources. You must have enough RAM to store a copy of the system and to execute applications. This should not be a problem unless the amount of memory available on the computer is less than twice the size of the ISO image.

Running the system from memory is useful if you work with multiple removable devices and you do not have sufficient drives or ports to insert them all at the same time. It is also essential if you are going to make changes on the device from which SystemRescue is being executed. For example, you may be running SystemRescue from an external disk, and you may want to use SystemRescue to repartition the device that it is on. Such an operation would cause the system to crash if it affects the SystemRescue installation on the device. This problem can be avoided by copying the system to memory during the system initialisation so it does not depend on files from the device after initialisation.

Running the system from memory is also more reliable than running it from a removable device. Unfortunately, read or write errors happen rather frequently with optical discs and USB memory sticks. A read error may happen while a program attempts to access files located on bad sectors. This might cause the application or the system to crash while you are in the middle of an important operation. In general, RAM is much more reliable, so this scenario is less likely to happen if you are running the system from memory.

Just remember that running SystemRescue from memory is strongly recommended if you have enough resources on your computer, especially if you plan to work from this system for an extended period or if you must perform a critical operation. The additional boot time can be minimized by using a fast boot device, such as a USB 3 memory stick.

==== Boot and verify the system integrity (checksum)
The boot menus also have an entry to check the integrity of the system during the boot process.

Unexpected problems are likely to happen if SystemRescue has been installed from a corrupted copy of the ISO image, or if it has been installed on a device which has bad sectors. These types of corruptions can cause the system or applications to crash, or to fail with unexpected errors.

The integrity of the ISO image can be verified manually using checksum files, as explained in the previous chapter. This entry in the boot menu provides an alternative way to verify the system's integrity. When you boot using this entry, the system calculates the checksum of the image located on the boot device and it compares it with the expected checksum. The boot process stops and shows an error message if it detects any corruption.

It is recommended that you use this option at least the first time you start SystemRescue from a new device, or when you experience stability problems. Such issues can also occur if the computer memory is defective. Running `Memtest86+` or any other memory tester can help determine if some memory modules must be replaced.

=== Boot entries implementations
Each entry in the boot menu correspond to a particular boot command line which controls how SystemRescue starts and behaves. These command lines start with essential parameters such as references to files which are loaded in memory. Optional parameters can be added at the end of a line to change the way the system is executed.

The main boot entries described above all load the same system image files but they use different boot options. For example, the entry which causes the system to be copied to memory is the same as the default entry except that the keyword `copytoram` has been added to the end of the command line. Also, the boot command line which triggers a verification of the system's integrity is similar to the default entry, but with the keyword `checksum` added to the end of the command line.

The boot menus offer only a small number of pre-defined choices that should satisfy common needs. But sometimes you might want to start the system with a different combination of options. For example, you might want to enable the options `copytoram` and `checksum` at the same time so the system runs from memory and it also verifies its integrity. Fortunately, the boot command lines that correspond to the entries in the boot menu can be edited before they are used, so you can control how the system will be executed.

The way you edit and execute boot command lines depends on the type of boot menu you are using. Instructions appear on the screen to remind you how you can edit boot command lines. Entries in the BIOS boot menu can be edited by pressing `Tab` and executed by pressing `Enter`. In the UEFI boot menu, entries are modified by pressing `e` and they are executed by pressing `F10`.

This chapter describes only the most important boot parameters. There are many others. There is a list of the most useful parameters in <<appendix_bootparam>> and you can get more details on the official project website. You may also want to make your changes to these entries persistent so the system always boots using the options you prefer. Then you won't have to edit these entries each time. If you boot SystemRescue from a writable device such as a memory stick, you can edit text files which define these boot entries. Please refer to <<appendix_bootentries>> for more details.

=== Booting the system
When you activate an entry from the boot menu, the system starts, and this console prompt appears when the system is ready:

image::images/console-prompt-v02.png[Console prompt]

If you don't see this screen, you should try to identify error messages, and verify the integrity of the system files using the corresponding entry from the boot menu. Also, you can test your computer memory using `Memtest86+` (if you use the legacy BIOS mode) or any other memory tester.

You do not need a username or password to start using SystemRescue. The session automatically runs as the `root` user account, as this is required to perform most maintenance operations. The system won't stop you from doing risky activities such as erasing a disk, so you must be sure that what you are doing is right. Always think twice before you execute sensitive or destructive commands.

=== Configuring the keyboard layout
The first thing to do when you see the console prompt is to configure the keyboard so it matches your layout. As explained on the screen you should type `setkmap` and press `Enter`. It will display a list of supported keyboard layouts. Select the appropriate choice and, ideally, note its exact name for future references.

The next time you start the system, you can directly specify the name of the layout on the command to not have to go through the list. For example, if you are based in France, you can just type `setkmap fr-latin1` and press `Enter`. Or you can add an option such as `setkmap=fr-latin1` to the system boot command line so the keyboard is automatically configured for your country when the system starts.

When you work in console mode, you can run only applications that run in text mode. Lots of powerful programs can be run this way. You have access to multiple virtual consoles, and you can switch between them by pressing `Alt+F1`, `Alt+F2`, `Alt+F3`, and so on. These allow you to run multiple programs in parallel.

=== Starting the graphical environment
You can continue working in the text environment if it suits you, but most users prefer to switch to a graphical environment at this stage. Hence, it is highly recommended that you type `startx` and press `Enter` as the instructions on the screen suggest. After a few seconds, you should see a graphical desktop on your screen. If you have problems getting to the graphical environment, try to restart the system using the boot entry that uses basic display drivers.
