[#chapter_diskphyscopy]
== Chapter 12: How to Create Disk Clones and Images
This chapter presents the steps to follow to create physical copies of disks. A disk may be copied to another disk or to an image file that can be restored in the future.

There are various reasons for creating copies of disks. First, you can create a copy of a disk to have a backup. An internal disk typically stores lots of contents such as the operating system, some applications, their configurations and some data files. If anything goes wrong, you would be able to restore all these contents from the backup you created. Having such a backup helps in case of software problems, for example, if the system stops working after a faulty system update or because of malware. Having a copy would also be useful if the disk must be replaced because of a hardware fault or as part of an upgrade.

Copying disks is also useful if you have installed the operating system and application on a computer and you want to duplicate this installation to similar computers without having to repeat the same installation procedure multiple times. Hence there are several use cases for copying disks.

=== Logical and physical approaches
There are multiple valid ways to copy disks. This chapter focuses on creating and restoring physical copies. Before we dive into the details, it is important to understand how the physical approach differs from a logical approach.

A logical copy is created by analysing the disk structures on the original disk and then recreating these structures and the data on the destination disk. As explained in <<chapter_diskstruct>> disks normally contain a partition table and multiple partitions which contain file systems. Copying disks logically requires programs to copy the partition table and each file system. It requires multiple operations, and each program involved must properly support a particular type of partition table or file system so the copy is successful. For example, the operating system installed on the disk may rely on file system attributes (such as a volume name or unique identifier) so it can recognize the file system where it is installed. Also, the boot loader which starts the system may rely on having boot sectors in specific locations on the disk. A logical copy of a disk will not be usable if any of these structures or attributes have not been properly recreated.

A physical copy is an exact copy of an entire disk. A disk is a long sequence of bytes. A physical copy does not involve complicated operations. All that is required is to copy each byte in the sequence. To perform a physical copy, the program does not need to understand how the disk is structured, so it does not need to support a particular type of partition table or file system. A physical copy has the same size as the original disk, as it is an exact copy.

There are also intermediate approaches between a strict physical copy and a logical copy. For example, some disk cloning utilities can copy disks at a block level and skip sections that are not in use.

This chapter focuses on creating strict physical copies of disks, as this approach has important advantages:

* It does not require any sophisticated program to create such a copy, as the utilities involved do not need support for particular disk structures.
* The copy is strictly identical to the original, so there is no risk of making a copy where some specific structures have not been properly preserved.
* An entire disk can be copied to or from an image file in a single operation using a simple command.

This approach also has disadvantages:

* It does not differentiate sections that contain data from those that do not, so everything is copied. Copying sections of the disk which are not in use causes the operation to take more time. Also, the copy uses more space if the destination is an image file, compared to logical copies where empty sections are skipped.
* It is impossible to copy a disk to a smaller disk, as the data at the end of the disk would be lost.

This physical approach is suitable for copying internal disks that contain an operating system, as preserving disk structures is important to keep systems working. Other approaches are more relevant for copying data files.

=== Exclusive access
Important: A disk must not be in use when it is being copied. Nothing apart from the program performing the copy should be accessing the disk while it is being copied. File systems located on the disk must not be mounted during the operation as files and internal structures could be modified. This is why file systems are not mounted automatically in SystemRescue. That approach gives you more control over which disks are being mounted so you can create or restore physical copies of your disks in a safe way.

Please note that nothing prevents you from copying a disk while it is in use. This would not necessarily cause any error, but the copy would be inconsistent and you would probably not notice the problem until you attempt to restore the copy.

SystemRescue must be run either from a removable medium such as a USB memory stick or from a copy in memory while you perform such a copy. This way, it does not rely on the disk that is being copied during the operation. It is recommended that you run SystemRescue from a copy in memory if you have enough resources. This can be achieved by selecting the entry to boot and copy the system to memory in the boot menu, as explained in <<chapter_starting>>.

=== The dd command
Physical disks, partitions and files are all seen by the operating system as sequences of bytes. This makes it possible to copy a physical disk or a partition to a file for backup and recovery purposes. The system reads or writes data by sectors that are typically 512 or 4096 bytes, depending on the type of disk. Physical copies are created by using the `dd` program, which is widely available on Linux systems. It must be run from the command line in a terminal. This program reads blocks of bytes sequentially from the input, and writes these blocks to the output. Both the input and output can be a file or a device such as a hard drive.

Here are three typical use cases:

* If you provide the name of a disk as the input and an ordinary file as the output, this effectively creates a new output file as an exact copy of the entire disk. The new file is an image of the disk, and it can be used as a backup that can be restored in the future.
* If you provide an image file as the input and the name of a disk as the output, then the disk is restored from the image file previously created.
* If you provide the names of two disks as input and output, the contents of the disk specified as input are copied to the disk specified as output. The destination disk must be at least as large as the source disk so all the data can fit.

The standard `dd` program works well when the devices do not have any bad sectors. In case of read or write errors while accessing the disk, it is recommended that you use GNU `ddrescue` instead of the standard `dd` command as `ddrescue` has been designed to cope with such situations. It works quite differently from `dd`, and this is outside the scope of the current use case, so it is not treated here. To understand how to use it, you must do some additional research.

=== Creating an image file of a disk
Here are the steps for copying a disk to an image file. As an example, we are going to copy an internal 500GB disk where the operating system is installed. The copy will be written to an external 1TB disk. The file system on the destination disk must have enough free space to store the image file, which will be as big as the disk being copied.

First, boot SystemRescue so the disk being copied is not in use during the operation. Then start the graphical environment and open a terminal to be ready to execute commands.

Next, you identify the two disks involved in the operation using the `lsblk` command in a terminal. In the current example, the system sees the disk to be copied as `/dev/sdc`, and it contains six partitions. The copy will be written to a file stored in a file system on `/dev/sdd1` which is the first partition of the external disk.
[subs=+quotes]
----
[root@sysrescue ~]# *lsblk -o path,size,fstype,label,model*
PATH         SIZE FSTYPE      LABEL     MODEL
/dev/sdc   465.8G                       Samsung_SSD_850_EVO_mSATA
/dev/sdc1      4G vfat        UEFI_ESP
/dev/sdc2    5.2G btrfs       boot
/dev/sdc3  406.5G crypto_LUKS
/dev/sdc4     16M
/dev/sdc5     48G ntfs        Windows
/dev/sdc6      2G vfat        SOFTWARE
/dev/sdd   931.5G                       SABRENT
/dev/sdd1  931.5G ext4        external
----

If your external disk does not contain a file system, please refer to <<chapter_partitioning>> to understand how to initialize the disk. The file system where the image file will be stored must be able to store large files. Modern file systems such as EXT4, XFS, BTRFS and NTFS can all cope with large files. However, FAT16 and FAT32 file systems are very limited and unreliable, so you should not store such image files on them.

Now you should create a new mount point which we call `external` so you can mount the external disk, as shown in the following two commands in a terminal:
[subs=+quotes]
----
[root@sysrescue ~]# *mkdir -p /mnt/external*
[root@sysrescue ~]# *mount -v /dev/sdd1 /mnt/external*
mount: /dev/sdd1 mounted on /mnt/external.
----

You can use the `df` command to check the type of file system it uses and to make sure it has enough space to store the image file:
[subs=+quotes]
----
[root@sysrescue ~]# *df -hT /mnt/external*
Filesystem     Type  Size  Used Avail Use% Mounted on
/dev/sdd1      ext4  916G   72M  870G   1% /mnt/external
----

Before you start the copy, make sure the disk being copied is not mounted so the copy is consistent. You do this by showing the mount points for this device using `lsblk` with the following options:
[subs=+quotes]
----
[root@sysrescue ~]# *lsblk -o path,size,fstype,label,mountpoint /dev/sdc*
PATH         SIZE FSTYPE      LABEL     MOUNTPOINT
/dev/sdc   465.8G
/dev/sdc1      4G vfat        UEFI_ESP
/dev/sdc2    5.2G btrfs       boot
/dev/sdc3  406.5G crypto_LUKS
/dev/sdc4     16M
/dev/sdc5     48G ntfs        Windows
/dev/sdc6      2G vfat        SOFTWARE  /mnt/software
----

In the example above `lsblk` shows that the sixth partition of the disk is mounted on `/mnt/software`, so this must be unmounted before you start copying `/dev/sdc`:
[subs=+quotes]
----
[root@sysrescue ~]# *umount /dev/sdc6*
----

You should now be ready to perform the copy. In a typical situation, the `dd` command needs two arguments: `if` and `of`. They represent the input and output files or devices. The input is the name of the device that corresponds to the entire internal disk. In the current example, it is `/dev/sdc`. The output is the name of the new image file located on the external disk. As the external disk is mounted on `/mnt/external` the full path of the image file could be something such as `/mnt/external/disk-image`. It is recommended that you give a quite specific name to your image file and that this name includes a date so you can identify which disk or computer it corresponds to and when it was created. Also, you should use the `dd` command with the `status=progress` option so you can follow the progress of the operation. Here is the full command that performs the copy in the current example:
[subs=+quotes]
----
[root@sysrescue ~]# *dd if=/dev/sdc of=/mnt/external/disk-image status=progress*
976773168+0 records in
976773168+0 records out
500107862016 bytes (500 GB, 466 GiB) copied, 11040.3 s, 45.3 MB/s
----

It is important to be very cautious when you run this command as it can be destructive if it is used incorrectly. If you provide the wrong output as the `of` parameter all data on the output file or device will be overwritten.

This command is likely to take a long time to complete as disks are often quite large. You must make sure there is no error message on the program output as this might be an indication that the image has not been created successfully.

The example above shows what you can expect to see when the command is successful. It shows the number of bytes which have been copied, the size in human-readable units and the number of blocks it corresponds to.

When the operation is complete, you should check that the size of the new image file is identical to the size of the disk you copied. You can use the `blockdev` command to get the exact size of the disk in bytes, and then the `du` command to show the exact size of the image file:
[subs=+quotes]
----
[root@sysrescue ~]# *blockdev --getsize64 /dev/sdc*
500107862016

[root@sysrescue ~]# *du -b /mnt/external/disk-image*
500107862016    /mnt/external/disk-image
----

After you have checked that everything is correct, run `sync` and unmount the external disk to make sure all write operations have been completed before you disconnect the external disk.
[subs=+quotes]
----
[root@sysrescue ~]# *sync*
[root@sysrescue ~]# *umount /mnt/external*
----

=== Restoring a disk from an image file
In the previous section, we created a copy of a disk as an image file that can be used as a backup of the entire disk. In this section, we do the exact opposite: we restore an image file to a disk. Restoring a disk from a backup is useful when an issue affects your system and it cannot be resolved easily. This can happen ,for example, if an operating system update was faulty and the system has become unusable. You may also want to copy the contents of an image file to a new disk if it is replacing an old disk that failed or as part of a hardware upgrade.

The operation in this section is destructive. All the disk contents will be replaced by the contents of the image file. So you must be sure that all important data on the target disk have been copied to a safe place before you start this operation. If you must recover data files from a disk, you can use the instructions from <<chapter_datatodisk>> or <<chapter_dataovernet>>.

As usual, you start by booting SystemRescue so you can operate on the internal disk without it being used by the operating system. Use the `lsblk` command to identify the name of the internal disk which must be restored (`/dev/sdc` in the current example) and the name of the external disk that contains the image file (`/dev/sdd1` in this example).
[subs=+quotes]
----
[root@sysrescue ~]# *lsblk -o path,size,fstype,label,mountpoint*
PATH         SIZE FSTYPE      LABEL     MOUNTPOINT
/dev/sdc   465.8G
/dev/sdc1      4G vfat        UEFI_ESP
/dev/sdc2    5.2G btrfs       boot
/dev/sdc3  406.5G crypto_LUKS
/dev/sdc4     16M
/dev/sdc5     48G ntfs        Windows
/dev/sdc6      2G vfat        SOFTWARE
/dev/sdd   931.5G
/dev/sdd1  931.5G ext4        external
----

The file system which contains the image file must be mounted on a new mount point, which we call `external`:
[subs=+quotes]
----
[root@sysrescue ~]# *mkdir -p /mnt/external*
[root@sysrescue ~]# *mount /dev/sdd1 /mnt/external*
----

Pay attention to all the details shown by the `lsblk` command, such as the disk size, partitions and labels to be sure you recognise the correct disk. This is a destructive operation, as all data on the target disk will be overwritten. Also, make sure the disk being overwritten does not contain any mounted file system, as the `dd` program must have exclusive access to the disk during the operation. If necessary, you must unmount these before you continue.

You should check that the target disk is at least as big as the disk image, otherwise, some data will be missing on the target disk. As before, use the `blockdev` and `du` commands to check the sizes of the disk and image file in bytes:
[subs=+quotes]
----
[root@sysrescue ~]# *du -b /mnt/external/disk-image*
500107862016      /mnt/external/disk-image

[root@sysrescue ~]# *blockdev --getsize64 /dev/sdc*
500107862016
----

Finally, run the `dd` command to copy the contents of the image file to the disk. In this case, the input specified using `if` is the path to the image file, and the output specified with `of` is the target disk where the image must be restored. Make sure that you have specified the correct output before you press `Enter`, as all data on this device will be overwritten.
[subs=+quotes]
----
[root@sysrescue ~]# *dd if=/mnt/external/disk-image of=/dev/sdc status=progress*
----

It is important that you read the messages printed on the screen to make sure there is no error during the operation.

After the operation, you can use the `lsblk` command again to see if the disk contains the partitions you expected.

You may have restored an image to a disk that is bigger than the image file. In that case, the additional space on the new disk is unallocated. You can use partitioning tools to grow existing partitions and file systems or you can create new partitions to take advantage of this space. To know more about disk partitioning, read <<chapter_partitioning>>.

=== Accessing a single partition in an image file
In the previous example, the entire disk was restored from an image file. Sometimes you want to restore only a single partition from an image file. For example, your operating system might have stopped working. In that case, you want to restore the contents of the partition where the operating system is installed from an image file created when the operating system was working correctly. In such a case, you do not want other partitions to be affected by this operation as they may contain data files which you want to preserve.

The image file was created as a copy of an entire disk, so it contains the contents of each partition at the time the image file was created. It is possible to copy a subset of the image to restore the contents of an individual partition. This operation might not work if the partitioning of the disk has been changed since the image was created.

Please follow the instructions from the previous section to identify the disks involved and to mount the disk that contains the image file that you want to partially restore.

Here, an extra step is required to access the contents that correspond to a specific partition in the image file. In theory, it is possible to manually analyse the partition table and calculate where the contents of a specific partition start and end in the image file, but this is risky.

To solve this problem, we get the system to create a virtual disk device from the image file so the image can be treated as an ordinary disk. As the image is a copy of a disk, it also contains a partition table. The system analyses it and creates virtual devices that correspond to each partition in the image file. This way the contents of the partition you want to restore from the image are easily accessible.

The `losetup` command lets you create a virtual disk device based on the contents of an image file. This type of virtual device is called a loop device. Each time data are read from the virtual device, the system actually gets the contents from the image file associated with the loop device. The device will be created in read-only mode to avoid accidental changes in the image file. Here is the full command that creates a virtual loop device from the image file located on the external disk:
[subs=+quotes]
----
[root@sysrescue ~]# *losetup --read-only -P --find --show /mnt/external/disk-image*
/dev/loop1
----

The command prints the name of the newly created virtual device, such as `/dev/loop1` in this example. The system may use other devices, such as `/dev/loop2`, depending on the circumstances. You can use `lsblk` to show the list of partitions which this new virtual disk contains. The partitions listed should be identical to those on the disk at the time you created the image file. Do not forget to replace `/dev/loop1` with the name that is relevant to your situation:
[subs=+quotes]
----
[root@sysrescue ~]# *lsblk -o path,size,fstype,label /dev/loop1*
PATH           SIZE FSTYPE      LABEL
/dev/loop1   465.8G
/dev/loop1p1     4G vfat        UEFI_ESP
/dev/loop1p2   5.2G btrfs       boot
/dev/loop1p3 406.5G crypto_LUKS
/dev/loop1p4    16M
/dev/loop1p5    48G ntfs        Windows
/dev/loop1p6     2G vfat        SOFTWARE
----

In this example, we can see the virtual device contains six partitions. We restore the contents of the fifth partition from the image file as this is the partition that contains the operating system that must be restored. The device which corresponds to this partition in the image file is `/dev/loop1p5` in our example. You can confirm that the size of this partition in the image file is identical to the size of the fifth partition on the target disk:
[subs=+quotes]
----
[root@sysrescue ~]# *blockdev --getsize64 /dev/loop1p5*
51521781760

[root@sysrescue ~]# *blockdev --getsize64 /dev/sdc5*
51521781760
----

Now you can use the `dd` command to restore the contents of the fifth partition from the partition on the virtual device. In the current example, the input is `/dev/loop1p5` and the output is `/dev/sdc5`. As usual, please double check that you are using the right input and output devices in your situation, as all contents on the output device will be overwritten.
[subs=+quotes]
----
[root@sysrescue ~]# *dd if=/dev/loop1p5 of=/dev/sdc5 status=progress*
----

At the end of the operation, the contents of this partition should be identical to the contents of this partition at the time the image was created, and other partitions should not have been affected by this operation. Now you can detach the virtual loop device before you can unmount the external disk, using the following commands:
[subs=+quotes]
----
[root@sysrescue ~]# *losetup --detach /dev/loop1*
[root@sysrescue ~]# *umount /mnt/external*
----

These virtual loop devices could also be mounted if you want to restore individual files from the image, instead of restoring an entire partition. You can refer to <<chapter_datatodisk>> for more details about how to copy files from one file system to another.

=== Alternative approaches
The instructions above were focused on physical copies. This approach was chosen because it is simple and it covers many essential use cases. The process could be improved in many ways. For example, physical images could have been compressed to save storage space. But this would have made it impossible to use virtual loop devices to directly access partitions inside the image. Also, compression would cause large parts of the image to become unusable in case the image file becomes corrupted. So there are good reasons to keep images files uncompressed, and that should not be a problem considering large external disks are quite affordable.

There are also many alternative approaches for copying disks, and different people have different needs and preferences. Other tools such as `partclone` are included in SystemRescue so you can consider them to see if they suit you better.

In any case, it is recommended that you create an image of the internal disk when the operating system and applications have all been installed and configured. Being able to restore a working backup of a disk can save a lot of time and effort when something goes wrong.
