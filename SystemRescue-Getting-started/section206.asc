[#chapter_diskstruct]
== Chapter 6: Disks Structures
Many operations performed with SystemRescue involve manipulating disks. This includes disk partitioning, creating or restoring backups of an operating system and recovering data files. It is important to have a good understanding of how disks are structured so you can perform these operations successfully. This chapter provides a bottom-up overview of how disks are structured. It applies to devices such as SSD disks, magnetic hard disks and USB memory sticks.

=== Disk devices
From the point of view of an operating system, a disk is simply a long sequence of bytes, which are grouped by sectors of typically 512 or 4096 bytes. For example, a 500GB disk is just a sequence of 500 billion bytes and it corresponds to around 1 billion sectors on a disk that uses 512 bytes per sector. A lot must happen to turn this unstructured sequence of bytes into files and folders that organise the storage of data.

=== Partition tables
Disks are often divided into partitions so the space can be used as if there were multiple smaller disks. For example, a 500GB disk could be partitioned into two partitions: a 200GB partition can be used to store operating system files and a 300GB partition can be allocated to user data.

The first few sectors of a physical disk often contain a partition table. This small structure defines a list of partitions on the disk and their attributes such as their start locations and sizes. For example here is a partition table on a 500GB disk as shown by the fdisk utility:
[subs=+quotes]
----
[root@sysrescue ~]# *fdisk --list /dev/sdc*
Disk /dev/sdc: 465.76 GiB, 500107862016 bytes, 976773168 sectors
Disk model: Samsung SSD 850
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: C616E018-6795-40A1-AFC1-5C91D7DE6C41

Device         Start       End   Sectors   Size Type
/dev/sdc1      20480   8407039   8386560     4G EFI System
/dev/sdc2    8407040  19402751  10995712   5.2G Linux filesystem
/dev/sdc3   19402752 871915519 852512768 406.5G Linux filesystem
/dev/sdc4  871915520 871948287     32768    16M Microsoft reserved
/dev/sdc5  871948288 955873279  83924992    40G Microsoft basic data
/dev/sdc6  955873280 960067583   4194304     2G Microsoft basic data
/dev/sdc7  960067584 976773119  16705536     8G Linux filesystem
----

In this example, you can see the disk uses sectors of 512 bytes each, and the partition table contains seven entries. Each entry defines where a partition starts and ends in terms of sectors, which are numbered from the beginning of the disk.

There are different types of partition tables. The most common types are MBR/MSDOS and GPT. MBR/MSDOS partition tables are old, and they are quite limited as they support only four primary partitions and each entry is limited to around 4 billion sectors. This limits the size of a partition to 2TB on disks using sectors of 512 bytes. GPT partition tables have been introduced more recently to remove these limitations. They also provide support for additional attributes, so each partition can have a name. Disks based on GPT also have a second copy of the partition table located at the end of the disk. This means it can be recovered if the first copy is overwritten or damaged.

Keep in mind that most disks contain a partition table even if all the space is allocated to a single partition. Also, some operating systems use small partitions which are not always visible in the file manager. This may give the impression the disk contains a single partition when there are more than one. You can check how a disk is partitioned by running tools such as GParted or fdisk from SystemRescue.

=== File systems
A partition on a disk is a subset of a disk, hence it is also a sequence of bytes. File systems turn these sequences of bytes into logical structures which allow data to be stored in files that are organised in directories. A file system manages all these structures including each file's contents and attributes such as timestamps and permissions.

Each operating system uses a different type of file system. Some provide only very basic features and others have advanced features such as transparent compression and snapshots. For example, MS-DOS and early versions of Windows use FAT file systems which are very limited. Recent versions of Windows use the new technology file system (NTFS) which removed old restrictions and introduced features such as support for access controls and transparent compression. On Linux, the most common native file systems are currently EXT4, XFS and BTRFS. Fortunately Linux also supports FAT and NTFS file systems, so SystemRescue can access files used by Windows.
