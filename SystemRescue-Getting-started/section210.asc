[#chapter_datatodisk]
== Chapter 10: How to Recover Files to Another Disk
SystemRescue can help you recover data files stored on a local disk when you have lost access to them. This can be essential, for example if the operating system installed on your computer has stopped working and it cannot restart. If the problem is caused by a software issue, such as a defective operating system update, you might have to reinstall the system. This often involves erasing the disk, hence losing data files stored on the disk. In such a situation, you should copy all your important data files to a safe place before you reinstall the system. The challenge is to copy your data files when the operating system is unusable. Fortunately, SystemRescue can help you access your data files when your ordinary operating system is broken.

There are multiple ways to copy your data files to a safe place. This chapter guides you through the process of copying files from one disk to another. In a typical situation, you would copy files located on an internal disk to an external disk. As an alternative, the next chapter shows you how to transfer files to another computer over a network.

The following instructions come with examples of commands applied to a real situation. In this example, we recover data files stored on a Windows NTFS file system and copy them to an external 1TB disk. This is just an example, and these instructions apply to similar situations, as long as the data are stored on file systems that SystemRescue can read. It is important to understand the general process and modify the commands so they match your particular situation.

=== Starting SystemRescue
If you are following these instructions, the operating system on your computer is probably not in working condition. So, the first thing to do is to boot SystemRescue. You then go to the graphical desktop and open a terminal to be ready to execute commands.

=== Identifying the disks
This operation involves two file systems. The first file system is where the files to be recovered are currently stored, and it is likely to be on an internal disk. The second file system is where these data files must be copied to, and it could be an external disk. These two file systems can be identified using `lsblk` in a terminal:
[subs=+quotes]
----
[root@sysrescue ~]# *lsblk -o path,size,fstype,label,model*
PATH         SIZE FSTYPE      LABEL     MODEL
/dev/sdc   465.8G                       Samsung_SSD_850_EVO_mSATA
/dev/sdc1      4G vfat        UEFI_ESP
/dev/sdc2    5.2G btrfs       boot
/dev/sdc3  406.5G crypto_LUKS
/dev/sdc4     16M
/dev/sdc5     48G ntfs        Windows
/dev/sdc6      2G vfat        SOFTWARE
/dev/sdd   931.5G                       SABRENT
/dev/sdd1  931.5G ext4        external
----

In this example, we copy data from the Windows partition identified as `/dev/sdc5` (the fifth partition on the internal disk) to `/dev/sdd1` which is a unique partition on the external 1TB disk.

=== Mounting the disks
Next, these two file systems must be mounted. To do this, you must create two mount points. The names of these directories are not important as long as they are the same in every step. Here, we call the mount points `internal` and `external` as the original data files are located on an internal disk and we want to copy them to an external disk. Run these two commands in a terminal to create the two mount points:
[subs=+quotes]
----
[root@sysrescue ~]# *mkdir -p /mnt/internal*
[root@sysrescue ~]# *mkdir -p /mnt/external*
----

The file system that contains the original data files will be mounted in read-only mode because write access is not required, and this reduces the risk of accidentally deleting these data files.
[subs=+quotes]
----
[root@sysrescue ~]# *mount /dev/sdc5 /mnt/internal -o ro*
----

The destination file system must be mounted in read-write mode so data can be written:
[subs=+quotes]
----
[root@sysrescue ~]# *mount /dev/sdd1 /mnt/external -o rw*
----

=== Copying the data files
At this stage, you can access the original data from `/mnt/internal` and the destination from `/mnt/external`. You can use any application you like to copy files between these two locations. The simplest methods are to use either Midnight Commander, which was introduced in <<chapter_mounting>> or to use the graphical file manager as follows.

Thunar is a user-friendly graphical file manager. You execute it by clicking on `file manager` in the main application menu. Then you navigate to the mount point where the source files are located - `/mnt/internal` in the current example. You reach this location either using the sidebar or by typing the path of the mount point in the address bar at the top. Then select the files or directories to be copied and click on `Copy` in the menu. Then navigate to `/mnt/external` and select `Paste` in the menu.

image::images/file-manager.png[The Thunar graphical file manager]

=== Unmounting the disks
When you have copied all your data files, run `sync` in the terminal to flush all pending operations to the disks. Then you unmount the two file systems using the `umount` commands as shown below:
[subs=+quotes]
----
[root@sysrescue ~]# *sync*
[root@sysrescue ~]# *umount /mnt/internal*
[root@sysrescue ~]# *umount /mnt/external*
----

Finally, you shut down SystemRescue properly to make sure the disk structures remain consistent.

=== Data verification
After you shut down SystemRescue, you should verify that your data have been copied successfully before you perform any operation on the original disk that might destroy data. If you have copied the data to an external disk, you might want to copy the files to another computer and make sure all the files you expect have been copied successfully.
